//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Movment"",
            ""id"": ""fed39d1c-834b-44d6-b52b-9dda541b4509"",
            ""actions"": [
                {
                    ""name"": ""Car Movment"",
                    ""type"": ""Value"",
                    ""id"": ""1c8bf8ba-80c6-4f9c-908a-04c26b799dff"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""6df59ef1-7581-4fa1-baad-5964958a5d07"",
                    ""path"": ""3DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Car Movment"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4062d557-cb76-4623-8c60-c8052c6a23db"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Car Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""13fcdb3b-6a32-4b18-a88d-a91ae2afc9ed"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Car Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""52d9a8cb-1db5-4479-85b7-2354f5d949b7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Car Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""78c0b90e-6e88-4b3f-90f2-f3d31d8db2dd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Car Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movment
        m_Movment = asset.FindActionMap("Movment", throwIfNotFound: true);
        m_Movment_CarMovment = m_Movment.FindAction("Car Movment", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movment
    private readonly InputActionMap m_Movment;
    private List<IMovmentActions> m_MovmentActionsCallbackInterfaces = new List<IMovmentActions>();
    private readonly InputAction m_Movment_CarMovment;
    public struct MovmentActions
    {
        private @PlayerInput m_Wrapper;
        public MovmentActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CarMovment => m_Wrapper.m_Movment_CarMovment;
        public InputActionMap Get() { return m_Wrapper.m_Movment; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovmentActions set) { return set.Get(); }
        public void AddCallbacks(IMovmentActions instance)
        {
            if (instance == null || m_Wrapper.m_MovmentActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovmentActionsCallbackInterfaces.Add(instance);
            @CarMovment.started += instance.OnCarMovment;
            @CarMovment.performed += instance.OnCarMovment;
            @CarMovment.canceled += instance.OnCarMovment;
        }

        private void UnregisterCallbacks(IMovmentActions instance)
        {
            @CarMovment.started -= instance.OnCarMovment;
            @CarMovment.performed -= instance.OnCarMovment;
            @CarMovment.canceled -= instance.OnCarMovment;
        }

        public void RemoveCallbacks(IMovmentActions instance)
        {
            if (m_Wrapper.m_MovmentActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovmentActions instance)
        {
            foreach (var item in m_Wrapper.m_MovmentActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovmentActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovmentActions @Movment => new MovmentActions(this);
    public interface IMovmentActions
    {
        void OnCarMovment(InputAction.CallbackContext context);
    }
}
